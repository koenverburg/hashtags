import { Reducer } from 'redux-testkit'
import * as actions from '../redux/{{ properCase name }}.actions'
import { {{ properCase name }}Reducer, initialState } from '../redux/{{ properCase name }}.reducer'
import { statuses } from '@utils'

describe('reducer - {{ properCase name }}', () => {
  it('should return the initial state', () => {
    expect({{ properCase name }}Reducer(undefined, {})).toEqual(initialState)
  })

  it('should set the status to `Pending` in the reducer', () => {
    const action = actions.init{{ properCase name }}DataFetching()
    const result = { ...initialState, status: statuses.PENDING, data: null, error: null }

    Reducer({{ properCase name }}Reducer)
      .withState(initialState)
      .expect(action)
      .toReturnState(result)
  })

  it('should set the status to `Fulfilled` in the reducer', () => {
    const action = actions.{{ lowerCase name }}DataFetchingFulfilled([{}])
    const result = {
      ...initialState,
      status: statuses.FULFILLED,
      data: [{}],
      error: null,
    }

    Reducer({{ properCase name }}Reducer)
      .withState(initialState)
      .expect(action)
      .toReturnState(result)
  })

  it('should set the status to `Rejected` in the reducer', () => {
    const action = actions.{{ lowerCase name }}DataFetchingRejected({})
    const result = { ...initialState, status: statuses.REJECTED, error: {}, data: null }

    Reducer({{ properCase name }}Reducer)
      .withState(initialState)
      .expect(action)
      .toReturnState(result)
  })

  it('should set the status to `Canceled` in the reducer', () => {
    const action = actions.{{ lowerCase name }}DataFetchingCanceled()
    const result = { ...initialState, status: statuses.CANCELED, data: null, error: null }

    Reducer({{ properCase name }}Reducer)
      .withState(initialState)
      .expect(action)
      .toReturnState(result)
  })

  /* GENERATOR-HANDLER-TEST-START */
  /* GENERATOR-HANDLER-TEST-END */
})
