import { expectSaga } from 'redux-saga-test-plan';
import * as matchers from 'redux-saga-test-plan/matchers'
import { throwError } from 'redux-saga-test-plan/providers';
import * as actions from '../redux/{{ properCase name }}.actions'
import {{ properCase name }}Api from '../{{ properCase name }}.api'
import get{{ properCase name}}Data from '../saga/{{ properCase name }}.get.saga'

const mockResponse = { response: { data: [{}] }, error: undefined }

describe('saga - get - {{ properCase name }}', () => {
  it('should get data', () =>
    expectSaga(get{{ properCase name}}Data)
      .provide([[matchers.call.fn({{ properCase name }}Api.index), mockResponse]])
      .put(actions.{{ lowerCase name }}DataFetchingFulfilled(mockResponse.response.data))
      .run()
      .then(result => {
      expect(result.toJSON()).toMatchSnapshot()
    }))

  it.skip('should handle errors', () => {
    const error = new Error('error')
    return expectSaga(get{{ properCase name}}Data)
      .provide([[matchers.call.fn({{ properCase name }}Api.index), throwError(error)]])
      .put(actions.{{ lowerCase name }}DataFetchingRejected(error))
      .run()
      .then(result => {
      expect(result.toJSON()).toMatchSnapshot()
    })
  })
})
